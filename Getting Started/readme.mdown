# Instructions

Here are the step by step instructions to getting rolling with Git and contributing on github.

## What is Git? What is Github?

Git is an open source [version control](https://en.wikipedia.org/wiki/Version_control) software. Think of it as a way to manage multiple people working on the same project; Git allows them to smartly "merge" changes to avoid conflicts. It also keeps a history of the project, so that you can roll back to a time before an error was introduced.

Github is a cloud-based storage site for git. It is a central place where everyone can download projects, track ongoing issues, and view information. It's not the only such site—[Gitorious](https://gitorious.org/) is another one, for example—but it's very popular and has some nice features.

## First Step - Install Git

See Pro Git [Chapter 1.4 Getting Started](http://git-scm.com/book/en/Getting-Started-Installing-Git).

On Windows:
Visit [git-scm.com](http://git-scm.com) and click [the download button](http://git-scm.com/downloads) for Windows. Once installed, you should have a *Git Bash* app as well as a contextual option to "Open Git Bash here" whenever you right-click on a folder in Windows Explorer. Git Bash responds to the same commands as Terminal apps on Mac or Linux so you'll be able to use the same commands despite using a different platform.

On Mac:
Install [XCode.app](https://developer.apple.com/xcode/), a free (but humongous) download in the Mac App Store. Run XCode and go to *Preferences > Downloads > Components* and then *Install* the *Command Line Tools*.
Alternatively, use [the graphical Git installer](http://code.google.com/p/git-osx-installer).
Or, if you have [Homebrew](http://mxcl.github.com/homebrew/) installed, run `brew install git`.

On Linux:
On Debian-based Linux (including Ubuntu), open a Terminal app and type `sudo apt-get install git`. You will be prompted for your password and Git will be installed.
On Fedora Linux, open a Terminal app and type `sudo yum install git-core`. You will be prompted for your password and Git will be installed.

Not sure if Git is installed? In a terminal, type `which git`. If Git is installed and available, it will print out a path to where Git is installed, e.g.

```bash
$ which git
/usr/local/bin/git
```

Pretty sure Git is installed, but `which git` is still returning nothing?
It's possible that Git is installed but is not in [your path](http://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them#answer-284351). In order to get Git in your path, you need to add a command like

```bash
export PATH="/path/to/git/bin:$PATH"
```

to your the .bash_profile file in your home directory (create a .bash_profile if none exist). This `export` command essentially says "prepend the path to Git to my PATH environment variable" and it has the effect of making the Git command available in your Terminal.

## Second Step - Create a Github account

This is one of the easier steps - just visit [Github](https://github.com/) and register your username, pick a password, etc. Now we just need to tell git your name and email. In a Terminal, run these commands:

```bash
git config --global user.name "Firstname Lastname"
git config --global user.email "you@email.com"
```

## Third Step - Clone this Repository onto your local computer

```bash
git clone https://github.com/LibraryCodeYearIG/Codeyear-IG-Github-Project.git
```

You'll see a result like this:

```
Cloning into 'Codeyear-IG-Github-Project'...
remote: Counting objects: 70, done.
remote: Compressing objects: 100% (59/59), done.
remote: Total 70 (delta 34), reused 47 (delta 11)
Unpacking objects: 100% (70/70), done.
```

Now, inside the Codeyear-IG-Github-Project folder, you have all the files of this project on your computer. Not only that, because this is a cloned git repository, you have the entire _history_ of the project. Try moving into the project's directory with `cd Codeyear-IG-Github-Project` and running `git log` to see the last few things that changed in the repository.

## Fourth Step - Add your name to the "List of People"

In the "Getting Started" folder is a list of people. For practice, open up the "List of People.mdown" file and add your name. It doesn't have to be your real name, though we'll be able to see your Github account eventually. Now save the file and run the `git status` command. You should see something like this:

```
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#   modified:   List of People.mdown
#
no changes added to commit (use "git add" and/or "git commit -a")
```

Understanding the idea behind a "commit" and your local changes is a major part of version control. Essentially, git can tell that the file has been altered, but it has yet to add your changes to its history of the project. You should feel free to go crazy and edit files all you want, including potentially breaking the project you're working on, but try to only commit a finished, working product because commits end up in the final history.

When you're done with your edits, the `git add` command is where you stage your changes; you might edit one file, add it, edit another file, add it, and so on before actually running `git commit`. The commit command finalizes your changes and adds them to the project's history. Let's walk through this whole process, running `git status` throughout to see how things change.

```
$ git add List\ of\ People.mdown
$ git status
# On branch instructions
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#   modified:   readme.mdown
#
$ git commit -m "Adding my name"
[master c43ae4d] Adding my name
 1 file changed, 1 insertion(+)
$ git status
# On branch master
nothing to commit, working directory clean
```

We've gone from having a perfect clone of the original project, to some changes that are not recorded by git, to letting git know which files we're going to add to its history, to adding those changes to the history, and then ending with a confirmation that the "working directory [is] clean" meaning that the last commit git knows about and the state of our files is identical.

You just made a `commit`! Sweet! If you're still skeptical, try running `git log` which prints out the last several commits. Yours will be at the top.

```bash
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Awesome Sauce <awe@somesau.ce>
Date:   Mon Feb 18 22:30:15 2013 -0500

    Adding my name
```

### Digression on Escaping Spaces

We have to type `List\ of\ People.mdown` instead of `List\ of\ People.mdown` because spaces are meaningful characters on the command line; they separate one command from the next. The \ escapes the following character. You can also wrap a string in quotes to escape it. But the biggest savior here can be tab completion; start typing "List" and then hit tab; suddenly, the rest of the file's name appears, escaped spaces and all. This can save you a lot of typing and help reduce mistakes.


## Fifth Step - Send a Pull Request to add your changes

## Sixth Step - View the project online & see your changes!

You just contributed to a project on Github, congratulations! Pretty cool, isn't it? In the future, we hope to have further projects which are more complicated and necessitate using some of Git's advanced features. For now, relax and get yourself a delicious beverage, you've earned it.

## I'm addicted; where can I do more?

The [Learning Git Resources](../learn-git-resources.mdown) document in this repository has links to a few more tutorials, some of which cover new features we didn't talk about. Check them out and report back if any are particularly good or bad!
